// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PaiStorage
import Foundation
import Swift
@_hasMissingDesignatedInitializers public class PSEStorageManager {
  public static let shared: PaiStorage.PSEStorageManager
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PSEUserDefaults {
  public enum Suite {
    case standard
    case shared(appGroupID: Swift.String)
    public init?(appGroupID: Swift.String)
  }
  public static func hasKey<T>(_ key: PaiStorage.PSEUserDefaults.Key<T>) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public static func hasKey(_ keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Bool
  public static func removeValue<T>(forKey key: PaiStorage.PSEUserDefaults.Key<T>) where T : Swift.Decodable, T : Swift.Encodable
  public static func removeValue(forKey keyString: Swift.String, from suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func reset(suite: PaiStorage.PSEUserDefaults.Suite)
  public static func integer(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Int
  public static func bool(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Bool
  public static func float(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Float
  public static func double(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Double
  public static func string(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.String?
  public static func data(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.Data?
  public static func date(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.Date?
  public static func url(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.URL?
  public static func array<T>(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> [T]? where T : Swift.Decodable, T : Swift.Encodable
  public static func dictionary<K, V>(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> [K : V]? where K : Swift.Decodable, K : Swift.Encodable, K : Swift.Hashable, V : Swift.Decodable, V : Swift.Encodable
  public static func codableObject<T>(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func object(forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Any?
  public static func set(_ value: Swift.Int, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Swift.Bool, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Swift.Float, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Swift.Double, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Swift.String?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Foundation.Data?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Foundation.Date?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set(_ value: Foundation.URL?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard)
  public static func set<T>(_ value: [T]?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) where T : Swift.Decodable, T : Swift.Encodable
  public static func set<K, V>(_ value: [K : V]?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) where K : Swift.Decodable, K : Swift.Encodable, K : Swift.Hashable, V : Swift.Decodable, V : Swift.Encodable
  public static func set<T>(_ value: T?, forKey keyString: Swift.String, in suite: PaiStorage.PSEUserDefaults.Suite = .standard) where T : Swift.Decodable, T : Swift.Encodable
  public static subscript<T>(key: PaiStorage.PSEUserDefaults.Key<T>) -> T? where T : Swift.Decodable, T : Swift.Encodable {
    get
    set
  }
  public static subscript(integer keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Int {
    get
    set
  }
  public static subscript(bool keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Bool {
    get
    set
  }
  public static subscript(float keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Float {
    get
    set
  }
  public static subscript(double keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.Double {
    get
    set
  }
  public static subscript(string keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Swift.String? {
    get
    set
  }
  public static subscript(data keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.Data? {
    get
    set
  }
  public static subscript(url keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.URL? {
    get
    set
  }
  public static subscript(date keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> Foundation.Date? {
    get
    set
  }
  public static subscript<T>(array keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> [T]? where T : Swift.Decodable, T : Swift.Encodable {
    get
    set
  }
  public static subscript<K, V>(dictionary keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> [K : V]? where K : Swift.Decodable, K : Swift.Encodable, K : Swift.Hashable, V : Swift.Decodable, V : Swift.Encodable {
    get
    set
  }
  public static subscript<T>(codable keyString: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite = .standard) -> T? where T : Swift.Decodable, T : Swift.Encodable {
    get
    set
  }
  @objc deinit
}
extension PSEUserDefaults {
  @_hasMissingDesignatedInitializers public class Keys {
    @objc deinit
  }
  @_inheritsConvenienceInitializers final public class Key<T> : PaiStorage.PSEUserDefaults.Keys where T : Swift.Decodable, T : Swift.Encodable {
    required public init(name: Swift.String, suite: PaiStorage.PSEUserDefaults.Suite)
    convenience public init(name: Swift.String, defaultValue: T, suite: PaiStorage.PSEUserDefaults.Suite)
    @objc deinit
  }
}
